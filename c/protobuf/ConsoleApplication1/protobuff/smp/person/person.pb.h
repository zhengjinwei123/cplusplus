// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: person.proto

#ifndef PROTOBUF_person_2eproto__INCLUDED
#define PROTOBUF_person_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "result.pb.h"
// @@protoc_insertion_point(includes)

namespace Message {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_person_2eproto();
void protobuf_AssignDesc_person_2eproto();
void protobuf_ShutdownFile_person_2eproto();

class CPerson;
class CPerson_CInternalClass;

enum CPerson_ECorpus {
  CPerson_ECorpus_UNIVERSAL = 0,
  CPerson_ECorpus_WEB = 1,
  CPerson_ECorpus_IMAGES = 2,
  CPerson_ECorpus_LOCAL = 3,
  CPerson_ECorpus_NEWS = 4,
  CPerson_ECorpus_PRODUCTS = 5,
  CPerson_ECorpus_VIDEO = 6
};
bool CPerson_ECorpus_IsValid(int value);
const CPerson_ECorpus CPerson_ECorpus_ECorpus_MIN = CPerson_ECorpus_UNIVERSAL;
const CPerson_ECorpus CPerson_ECorpus_ECorpus_MAX = CPerson_ECorpus_VIDEO;
const int CPerson_ECorpus_ECorpus_ARRAYSIZE = CPerson_ECorpus_ECorpus_MAX + 1;

const ::google::protobuf::EnumDescriptor* CPerson_ECorpus_descriptor();
inline const ::std::string& CPerson_ECorpus_Name(CPerson_ECorpus value) {
  return ::google::protobuf::internal::NameOfEnum(
    CPerson_ECorpus_descriptor(), value);
}
inline bool CPerson_ECorpus_Parse(
    const ::std::string& name, CPerson_ECorpus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CPerson_ECorpus>(
    CPerson_ECorpus_descriptor(), name, value);
}
// ===================================================================

class CPerson_CInternalClass : public ::google::protobuf::Message {
 public:
  CPerson_CInternalClass();
  virtual ~CPerson_CInternalClass();

  CPerson_CInternalClass(const CPerson_CInternalClass& from);

  inline CPerson_CInternalClass& operator=(const CPerson_CInternalClass& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CPerson_CInternalClass& default_instance();

  void Swap(CPerson_CInternalClass* other);

  // implements Message ----------------------------------------------

  CPerson_CInternalClass* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CPerson_CInternalClass& from);
  void MergeFrom(const CPerson_CInternalClass& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string url = 1;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 1;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const char* value, size_t size);
  inline ::std::string* mutable_url();
  inline ::std::string* release_url();
  inline void set_allocated_url(::std::string* url);

  // optional string title = 2;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 2;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // repeated string snippets = 3;
  inline int snippets_size() const;
  inline void clear_snippets();
  static const int kSnippetsFieldNumber = 3;
  inline const ::std::string& snippets(int index) const;
  inline ::std::string* mutable_snippets(int index);
  inline void set_snippets(int index, const ::std::string& value);
  inline void set_snippets(int index, const char* value);
  inline void set_snippets(int index, const char* value, size_t size);
  inline ::std::string* add_snippets();
  inline void add_snippets(const ::std::string& value);
  inline void add_snippets(const char* value);
  inline void add_snippets(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& snippets() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_snippets();

  // @@protoc_insertion_point(class_scope:Message.CPerson.CInternalClass)
 private:
  inline void set_has_url();
  inline void clear_has_url();
  inline void set_has_title();
  inline void clear_has_title();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* url_;
  ::std::string* title_;
  ::google::protobuf::RepeatedPtrField< ::std::string> snippets_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_person_2eproto();
  friend void protobuf_AssignDesc_person_2eproto();
  friend void protobuf_ShutdownFile_person_2eproto();

  void InitAsDefaultInstance();
  static CPerson_CInternalClass* default_instance_;
};
// -------------------------------------------------------------------

class CPerson : public ::google::protobuf::Message {
 public:
  CPerson();
  virtual ~CPerson();

  CPerson(const CPerson& from);

  inline CPerson& operator=(const CPerson& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CPerson& default_instance();

  void Swap(CPerson* other);

  // implements Message ----------------------------------------------

  CPerson* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CPerson& from);
  void MergeFrom(const CPerson& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CPerson_CInternalClass CInternalClass;

  typedef CPerson_ECorpus ECorpus;
  static const ECorpus UNIVERSAL = CPerson_ECorpus_UNIVERSAL;
  static const ECorpus WEB = CPerson_ECorpus_WEB;
  static const ECorpus IMAGES = CPerson_ECorpus_IMAGES;
  static const ECorpus LOCAL = CPerson_ECorpus_LOCAL;
  static const ECorpus NEWS = CPerson_ECorpus_NEWS;
  static const ECorpus PRODUCTS = CPerson_ECorpus_PRODUCTS;
  static const ECorpus VIDEO = CPerson_ECorpus_VIDEO;
  static inline bool ECorpus_IsValid(int value) {
    return CPerson_ECorpus_IsValid(value);
  }
  static const ECorpus ECorpus_MIN =
    CPerson_ECorpus_ECorpus_MIN;
  static const ECorpus ECorpus_MAX =
    CPerson_ECorpus_ECorpus_MAX;
  static const int ECorpus_ARRAYSIZE =
    CPerson_ECorpus_ECorpus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ECorpus_descriptor() {
    return CPerson_ECorpus_descriptor();
  }
  static inline const ::std::string& ECorpus_Name(ECorpus value) {
    return CPerson_ECorpus_Name(value);
  }
  static inline bool ECorpus_Parse(const ::std::string& name,
      ECorpus* value) {
    return CPerson_ECorpus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int32 ID = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIDFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required string Name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string Email = 3;
  inline bool has_email() const;
  inline void clear_email();
  static const int kEmailFieldNumber = 3;
  inline const ::std::string& email() const;
  inline void set_email(const ::std::string& value);
  inline void set_email(const char* value);
  inline void set_email(const char* value, size_t size);
  inline ::std::string* mutable_email();
  inline ::std::string* release_email();
  inline void set_allocated_email(::std::string* email);

  // optional int32 Page = 4 [default = 10];
  inline bool has_page() const;
  inline void clear_page();
  static const int kPageFieldNumber = 4;
  inline ::google::protobuf::int32 page() const;
  inline void set_page(::google::protobuf::int32 value);

  // repeated int32 Samples = 5 [packed = true];
  inline int samples_size() const;
  inline void clear_samples();
  static const int kSamplesFieldNumber = 5;
  inline ::google::protobuf::int32 samples(int index) const;
  inline void set_samples(int index, ::google::protobuf::int32 value);
  inline void add_samples(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      samples() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_samples();

  // optional .Message.CPerson.ECorpus Corpus = 6 [default = WEB];
  inline bool has_corpus() const;
  inline void clear_corpus();
  static const int kCorpusFieldNumber = 6;
  inline ::Message::CPerson_ECorpus corpus() const;
  inline void set_corpus(::Message::CPerson_ECorpus value);

  // repeated .Message.CResult Result = 7;
  inline int result_size() const;
  inline void clear_result();
  static const int kResultFieldNumber = 7;
  inline const ::Message::CResult& result(int index) const;
  inline ::Message::CResult* mutable_result(int index);
  inline ::Message::CResult* add_result();
  inline const ::google::protobuf::RepeatedPtrField< ::Message::CResult >&
      result() const;
  inline ::google::protobuf::RepeatedPtrField< ::Message::CResult >*
      mutable_result();

  // repeated .Message.CPerson.CInternalClass InternalClass = 8;
  inline int internalclass_size() const;
  inline void clear_internalclass();
  static const int kInternalClassFieldNumber = 8;
  inline const ::Message::CPerson_CInternalClass& internalclass(int index) const;
  inline ::Message::CPerson_CInternalClass* mutable_internalclass(int index);
  inline ::Message::CPerson_CInternalClass* add_internalclass();
  inline const ::google::protobuf::RepeatedPtrField< ::Message::CPerson_CInternalClass >&
      internalclass() const;
  inline ::google::protobuf::RepeatedPtrField< ::Message::CPerson_CInternalClass >*
      mutable_internalclass();

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(CPerson)
  // @@protoc_insertion_point(class_scope:Message.CPerson)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_email();
  inline void clear_has_email();
  inline void set_has_page();
  inline void clear_has_page();
  inline void set_has_corpus();
  inline void clear_has_corpus();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 page_;
  ::std::string* email_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > samples_;
  mutable int _samples_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::Message::CResult > result_;
  ::google::protobuf::RepeatedPtrField< ::Message::CPerson_CInternalClass > internalclass_;
  int corpus_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_person_2eproto();
  friend void protobuf_AssignDesc_person_2eproto();
  friend void protobuf_ShutdownFile_person_2eproto();

  void InitAsDefaultInstance();
  static CPerson* default_instance_;
};
// ===================================================================


// ===================================================================

// CPerson_CInternalClass

// required string url = 1;
inline bool CPerson_CInternalClass::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CPerson_CInternalClass::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CPerson_CInternalClass::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CPerson_CInternalClass::clear_url() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    url_->clear();
  }
  clear_has_url();
}
inline const ::std::string& CPerson_CInternalClass::url() const {
  return *url_;
}
inline void CPerson_CInternalClass::set_url(const ::std::string& value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void CPerson_CInternalClass::set_url(const char* value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void CPerson_CInternalClass::set_url(const char* value, size_t size) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CPerson_CInternalClass::mutable_url() {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  return url_;
}
inline ::std::string* CPerson_CInternalClass::release_url() {
  clear_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = url_;
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CPerson_CInternalClass::set_allocated_url(::std::string* url) {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (url) {
    set_has_url();
    url_ = url;
  } else {
    clear_has_url();
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string title = 2;
inline bool CPerson_CInternalClass::has_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CPerson_CInternalClass::set_has_title() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CPerson_CInternalClass::clear_has_title() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CPerson_CInternalClass::clear_title() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& CPerson_CInternalClass::title() const {
  return *title_;
}
inline void CPerson_CInternalClass::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void CPerson_CInternalClass::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void CPerson_CInternalClass::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CPerson_CInternalClass::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  return title_;
}
inline ::std::string* CPerson_CInternalClass::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CPerson_CInternalClass::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated string snippets = 3;
inline int CPerson_CInternalClass::snippets_size() const {
  return snippets_.size();
}
inline void CPerson_CInternalClass::clear_snippets() {
  snippets_.Clear();
}
inline const ::std::string& CPerson_CInternalClass::snippets(int index) const {
  return snippets_.Get(index);
}
inline ::std::string* CPerson_CInternalClass::mutable_snippets(int index) {
  return snippets_.Mutable(index);
}
inline void CPerson_CInternalClass::set_snippets(int index, const ::std::string& value) {
  snippets_.Mutable(index)->assign(value);
}
inline void CPerson_CInternalClass::set_snippets(int index, const char* value) {
  snippets_.Mutable(index)->assign(value);
}
inline void CPerson_CInternalClass::set_snippets(int index, const char* value, size_t size) {
  snippets_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CPerson_CInternalClass::add_snippets() {
  return snippets_.Add();
}
inline void CPerson_CInternalClass::add_snippets(const ::std::string& value) {
  snippets_.Add()->assign(value);
}
inline void CPerson_CInternalClass::add_snippets(const char* value) {
  snippets_.Add()->assign(value);
}
inline void CPerson_CInternalClass::add_snippets(const char* value, size_t size) {
  snippets_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CPerson_CInternalClass::snippets() const {
  return snippets_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CPerson_CInternalClass::mutable_snippets() {
  return &snippets_;
}

// -------------------------------------------------------------------

// CPerson

// required int32 ID = 1;
inline bool CPerson::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CPerson::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CPerson::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CPerson::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 CPerson::id() const {
  return id_;
}
inline void CPerson::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required string Name = 2;
inline bool CPerson::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CPerson::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CPerson::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CPerson::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CPerson::name() const {
  return *name_;
}
inline void CPerson::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CPerson::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CPerson::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CPerson::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* CPerson::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CPerson::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string Email = 3;
inline bool CPerson::has_email() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CPerson::set_has_email() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CPerson::clear_has_email() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CPerson::clear_email() {
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    email_->clear();
  }
  clear_has_email();
}
inline const ::std::string& CPerson::email() const {
  return *email_;
}
inline void CPerson::set_email(const ::std::string& value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(value);
}
inline void CPerson::set_email(const char* value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(value);
}
inline void CPerson::set_email(const char* value, size_t size) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CPerson::mutable_email() {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  return email_;
}
inline ::std::string* CPerson::release_email() {
  clear_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = email_;
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CPerson::set_allocated_email(::std::string* email) {
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    delete email_;
  }
  if (email) {
    set_has_email();
    email_ = email;
  } else {
    clear_has_email();
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 Page = 4 [default = 10];
inline bool CPerson::has_page() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CPerson::set_has_page() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CPerson::clear_has_page() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CPerson::clear_page() {
  page_ = 10;
  clear_has_page();
}
inline ::google::protobuf::int32 CPerson::page() const {
  return page_;
}
inline void CPerson::set_page(::google::protobuf::int32 value) {
  set_has_page();
  page_ = value;
}

// repeated int32 Samples = 5 [packed = true];
inline int CPerson::samples_size() const {
  return samples_.size();
}
inline void CPerson::clear_samples() {
  samples_.Clear();
}
inline ::google::protobuf::int32 CPerson::samples(int index) const {
  return samples_.Get(index);
}
inline void CPerson::set_samples(int index, ::google::protobuf::int32 value) {
  samples_.Set(index, value);
}
inline void CPerson::add_samples(::google::protobuf::int32 value) {
  samples_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CPerson::samples() const {
  return samples_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CPerson::mutable_samples() {
  return &samples_;
}

// optional .Message.CPerson.ECorpus Corpus = 6 [default = WEB];
inline bool CPerson::has_corpus() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CPerson::set_has_corpus() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CPerson::clear_has_corpus() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CPerson::clear_corpus() {
  corpus_ = 1;
  clear_has_corpus();
}
inline ::Message::CPerson_ECorpus CPerson::corpus() const {
  return static_cast< ::Message::CPerson_ECorpus >(corpus_);
}
inline void CPerson::set_corpus(::Message::CPerson_ECorpus value) {
  assert(::Message::CPerson_ECorpus_IsValid(value));
  set_has_corpus();
  corpus_ = value;
}

// repeated .Message.CResult Result = 7;
inline int CPerson::result_size() const {
  return result_.size();
}
inline void CPerson::clear_result() {
  result_.Clear();
}
inline const ::Message::CResult& CPerson::result(int index) const {
  return result_.Get(index);
}
inline ::Message::CResult* CPerson::mutable_result(int index) {
  return result_.Mutable(index);
}
inline ::Message::CResult* CPerson::add_result() {
  return result_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Message::CResult >&
CPerson::result() const {
  return result_;
}
inline ::google::protobuf::RepeatedPtrField< ::Message::CResult >*
CPerson::mutable_result() {
  return &result_;
}

// repeated .Message.CPerson.CInternalClass InternalClass = 8;
inline int CPerson::internalclass_size() const {
  return internalclass_.size();
}
inline void CPerson::clear_internalclass() {
  internalclass_.Clear();
}
inline const ::Message::CPerson_CInternalClass& CPerson::internalclass(int index) const {
  return internalclass_.Get(index);
}
inline ::Message::CPerson_CInternalClass* CPerson::mutable_internalclass(int index) {
  return internalclass_.Mutable(index);
}
inline ::Message::CPerson_CInternalClass* CPerson::add_internalclass() {
  return internalclass_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Message::CPerson_CInternalClass >&
CPerson::internalclass() const {
  return internalclass_;
}
inline ::google::protobuf::RepeatedPtrField< ::Message::CPerson_CInternalClass >*
CPerson::mutable_internalclass() {
  return &internalclass_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Message

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Message::CPerson_ECorpus>() {
  return ::Message::CPerson_ECorpus_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_person_2eproto__INCLUDED
