// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: person.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "person.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Message {

namespace {

const ::google::protobuf::Descriptor* CPerson_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CPerson_reflection_ = NULL;
const ::google::protobuf::Descriptor* CPerson_CInternalClass_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CPerson_CInternalClass_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CPerson_ECorpus_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_person_2eproto() {
  protobuf_AddDesc_person_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "person.proto");
  GOOGLE_CHECK(file != NULL);
  CPerson_descriptor_ = file->message_type(0);
  static const int CPerson_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPerson, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPerson, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPerson, email_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPerson, page_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPerson, samples_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPerson, corpus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPerson, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPerson, internalclass_),
  };
  CPerson_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CPerson_descriptor_,
      CPerson::default_instance_,
      CPerson_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPerson, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPerson, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPerson, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CPerson));
  CPerson_CInternalClass_descriptor_ = CPerson_descriptor_->nested_type(0);
  static const int CPerson_CInternalClass_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPerson_CInternalClass, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPerson_CInternalClass, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPerson_CInternalClass, snippets_),
  };
  CPerson_CInternalClass_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CPerson_CInternalClass_descriptor_,
      CPerson_CInternalClass::default_instance_,
      CPerson_CInternalClass_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPerson_CInternalClass, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPerson_CInternalClass, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CPerson_CInternalClass));
  CPerson_ECorpus_descriptor_ = CPerson_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_person_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CPerson_descriptor_, &CPerson::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CPerson_CInternalClass_descriptor_, &CPerson_CInternalClass::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_person_2eproto() {
  delete CPerson::default_instance_;
  delete CPerson_reflection_;
  delete CPerson_CInternalClass::default_instance_;
  delete CPerson_CInternalClass_reflection_;
}

void protobuf_AddDesc_person_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Message::protobuf_AddDesc_result_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014person.proto\022\007Message\032\014result.proto\"\205\003"
    "\n\007CPerson\022\n\n\002ID\030\001 \002(\005\022\014\n\004Name\030\002 \002(\t\022\r\n\005E"
    "mail\030\003 \001(\t\022\020\n\004Page\030\004 \001(\005:\00210\022\023\n\007Samples\030"
    "\005 \003(\005B\002\020\001\022-\n\006Corpus\030\006 \001(\0162\030.Message.CPer"
    "son.ECorpus:\003WEB\022 \n\006Result\030\007 \003(\0132\020.Messa"
    "ge.CResult\0226\n\rInternalClass\030\010 \003(\0132\037.Mess"
    "age.CPerson.CInternalClass\032>\n\016CInternalC"
    "lass\022\013\n\003url\030\001 \002(\t\022\r\n\005title\030\002 \001(\t\022\020\n\010snip"
    "pets\030\003 \003(\t\"[\n\007ECorpus\022\r\n\tUNIVERSAL\020\000\022\007\n\003"
    "WEB\020\001\022\n\n\006IMAGES\020\002\022\t\n\005LOCAL\020\003\022\010\n\004NEWS\020\004\022\014"
    "\n\010PRODUCTS\020\005\022\t\n\005VIDEO\020\006*\004\010\n\020e", 429);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "person.proto", &protobuf_RegisterTypes);
  CPerson::default_instance_ = new CPerson();
  CPerson_CInternalClass::default_instance_ = new CPerson_CInternalClass();
  CPerson::default_instance_->InitAsDefaultInstance();
  CPerson_CInternalClass::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_person_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_person_2eproto {
  StaticDescriptorInitializer_person_2eproto() {
    protobuf_AddDesc_person_2eproto();
  }
} static_descriptor_initializer_person_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* CPerson_ECorpus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CPerson_ECorpus_descriptor_;
}
bool CPerson_ECorpus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CPerson_ECorpus CPerson::UNIVERSAL;
const CPerson_ECorpus CPerson::WEB;
const CPerson_ECorpus CPerson::IMAGES;
const CPerson_ECorpus CPerson::LOCAL;
const CPerson_ECorpus CPerson::NEWS;
const CPerson_ECorpus CPerson::PRODUCTS;
const CPerson_ECorpus CPerson::VIDEO;
const CPerson_ECorpus CPerson::ECorpus_MIN;
const CPerson_ECorpus CPerson::ECorpus_MAX;
const int CPerson::ECorpus_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CPerson_CInternalClass::kUrlFieldNumber;
const int CPerson_CInternalClass::kTitleFieldNumber;
const int CPerson_CInternalClass::kSnippetsFieldNumber;
#endif  // !_MSC_VER

CPerson_CInternalClass::CPerson_CInternalClass()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CPerson_CInternalClass::InitAsDefaultInstance() {
}

CPerson_CInternalClass::CPerson_CInternalClass(const CPerson_CInternalClass& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CPerson_CInternalClass::SharedCtor() {
  _cached_size_ = 0;
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CPerson_CInternalClass::~CPerson_CInternalClass() {
  SharedDtor();
}

void CPerson_CInternalClass::SharedDtor() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (this != default_instance_) {
  }
}

void CPerson_CInternalClass::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPerson_CInternalClass::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CPerson_CInternalClass_descriptor_;
}

const CPerson_CInternalClass& CPerson_CInternalClass::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_person_2eproto();
  return *default_instance_;
}

CPerson_CInternalClass* CPerson_CInternalClass::default_instance_ = NULL;

CPerson_CInternalClass* CPerson_CInternalClass::New() const {
  return new CPerson_CInternalClass;
}

void CPerson_CInternalClass::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::kEmptyString) {
        url_->clear();
      }
    }
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
  }
  snippets_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CPerson_CInternalClass::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string url = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_title;
        break;
      }

      // optional string title = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_snippets;
        break;
      }

      // repeated string snippets = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_snippets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_snippets()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->snippets(this->snippets_size() - 1).data(),
            this->snippets(this->snippets_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_snippets;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CPerson_CInternalClass::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string url = 1;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->url(), output);
  }

  // optional string title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->title(), output);
  }

  // repeated string snippets = 3;
  for (int i = 0; i < this->snippets_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->snippets(i).data(), this->snippets(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->snippets(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CPerson_CInternalClass::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string url = 1;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->url(), target);
  }

  // optional string title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }

  // repeated string snippets = 3;
  for (int i = 0; i < this->snippets_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->snippets(i).data(), this->snippets(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->snippets(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CPerson_CInternalClass::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string url = 1;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional string title = 2;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

  }
  // repeated string snippets = 3;
  total_size += 1 * this->snippets_size();
  for (int i = 0; i < this->snippets_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->snippets(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPerson_CInternalClass::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CPerson_CInternalClass* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CPerson_CInternalClass*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CPerson_CInternalClass::MergeFrom(const CPerson_CInternalClass& from) {
  GOOGLE_CHECK_NE(&from, this);
  snippets_.MergeFrom(from.snippets_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_url()) {
      set_url(from.url());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CPerson_CInternalClass::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPerson_CInternalClass::CopyFrom(const CPerson_CInternalClass& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPerson_CInternalClass::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CPerson_CInternalClass::Swap(CPerson_CInternalClass* other) {
  if (other != this) {
    std::swap(url_, other->url_);
    std::swap(title_, other->title_);
    snippets_.Swap(&other->snippets_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CPerson_CInternalClass::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CPerson_CInternalClass_descriptor_;
  metadata.reflection = CPerson_CInternalClass_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CPerson::kIDFieldNumber;
const int CPerson::kNameFieldNumber;
const int CPerson::kEmailFieldNumber;
const int CPerson::kPageFieldNumber;
const int CPerson::kSamplesFieldNumber;
const int CPerson::kCorpusFieldNumber;
const int CPerson::kResultFieldNumber;
const int CPerson::kInternalClassFieldNumber;
#endif  // !_MSC_VER

CPerson::CPerson()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CPerson::InitAsDefaultInstance() {
}

CPerson::CPerson(const CPerson& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CPerson::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  page_ = 10;
  corpus_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CPerson::~CPerson() {
  SharedDtor();
}

void CPerson::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    delete email_;
  }
  if (this != default_instance_) {
  }
}

void CPerson::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPerson::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CPerson_descriptor_;
}

const CPerson& CPerson::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_person_2eproto();
  return *default_instance_;
}

CPerson* CPerson::default_instance_ = NULL;

CPerson* CPerson::New() const {
  return new CPerson;
}

void CPerson::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_email()) {
      if (email_ != &::google::protobuf::internal::kEmptyString) {
        email_->clear();
      }
    }
    page_ = 10;
    corpus_ = 1;
  }
  samples_.Clear();
  result_.Clear();
  internalclass_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CPerson::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Name;
        break;
      }

      // required string Name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Email;
        break;
      }

      // optional string Email = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->email().data(), this->email().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Page;
        break;
      }

      // optional int32 Page = 4 [default = 10];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Page:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_)));
          set_has_page();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_Samples;
        break;
      }

      // repeated int32 Samples = 5 [packed = true];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Samples:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_samples())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 42, input, this->mutable_samples())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_Corpus;
        break;
      }

      // optional .Message.CPerson.ECorpus Corpus = 6 [default = WEB];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Corpus:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Message::CPerson_ECorpus_IsValid(value)) {
            set_corpus(static_cast< ::Message::CPerson_ECorpus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_Result;
        break;
      }

      // repeated .Message.CResult Result = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_Result;
        if (input->ExpectTag(66)) goto parse_InternalClass;
        break;
      }

      // repeated .Message.CPerson.CInternalClass InternalClass = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_InternalClass:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_internalclass()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_InternalClass;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((80u <= tag && tag < 808u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CPerson::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required string Name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional string Email = 3;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->email(), output);
  }

  // optional int32 Page = 4 [default = 10];
  if (has_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->page(), output);
  }

  // repeated int32 Samples = 5 [packed = true];
  if (this->samples_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_samples_cached_byte_size_);
  }
  for (int i = 0; i < this->samples_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->samples(i), output);
  }

  // optional .Message.CPerson.ECorpus Corpus = 6 [default = WEB];
  if (has_corpus()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->corpus(), output);
  }

  // repeated .Message.CResult Result = 7;
  for (int i = 0; i < this->result_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->result(i), output);
  }

  // repeated .Message.CPerson.CInternalClass InternalClass = 8;
  for (int i = 0; i < this->internalclass_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->internalclass(i), output);
  }

  // Extension range [10, 101)
  _extensions_.SerializeWithCachedSizes(
      10, 101, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CPerson::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required string Name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string Email = 3;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->email(), target);
  }

  // optional int32 Page = 4 [default = 10];
  if (has_page()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->page(), target);
  }

  // repeated int32 Samples = 5 [packed = true];
  if (this->samples_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _samples_cached_byte_size_, target);
  }
  for (int i = 0; i < this->samples_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->samples(i), target);
  }

  // optional .Message.CPerson.ECorpus Corpus = 6 [default = WEB];
  if (has_corpus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->corpus(), target);
  }

  // repeated .Message.CResult Result = 7;
  for (int i = 0; i < this->result_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->result(i), target);
  }

  // repeated .Message.CPerson.CInternalClass InternalClass = 8;
  for (int i = 0; i < this->internalclass_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->internalclass(i), target);
  }

  // Extension range [10, 101)
  target = _extensions_.SerializeWithCachedSizesToArray(
      10, 101, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CPerson::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required string Name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string Email = 3;
    if (has_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email());
    }

    // optional int32 Page = 4 [default = 10];
    if (has_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->page());
    }

    // optional .Message.CPerson.ECorpus Corpus = 6 [default = WEB];
    if (has_corpus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->corpus());
    }

  }
  // repeated int32 Samples = 5 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->samples_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->samples(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _samples_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .Message.CResult Result = 7;
  total_size += 1 * this->result_size();
  for (int i = 0; i < this->result_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->result(i));
  }

  // repeated .Message.CPerson.CInternalClass InternalClass = 8;
  total_size += 1 * this->internalclass_size();
  for (int i = 0; i < this->internalclass_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->internalclass(i));
  }

  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPerson::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CPerson* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CPerson*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CPerson::MergeFrom(const CPerson& from) {
  GOOGLE_CHECK_NE(&from, this);
  samples_.MergeFrom(from.samples_);
  result_.MergeFrom(from.result_);
  internalclass_.MergeFrom(from.internalclass_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_email()) {
      set_email(from.email());
    }
    if (from.has_page()) {
      set_page(from.page());
    }
    if (from.has_corpus()) {
      set_corpus(from.corpus());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CPerson::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPerson::CopyFrom(const CPerson& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPerson::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < result_size(); i++) {
    if (!this->result(i).IsInitialized()) return false;
  }
  for (int i = 0; i < internalclass_size(); i++) {
    if (!this->internalclass(i).IsInitialized()) return false;
  }

  if (!_extensions_.IsInitialized()) return false;  return true;
}

void CPerson::Swap(CPerson* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(email_, other->email_);
    std::swap(page_, other->page_);
    samples_.Swap(&other->samples_);
    std::swap(corpus_, other->corpus_);
    result_.Swap(&other->result_);
    internalclass_.Swap(&other->internalclass_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata CPerson::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CPerson_descriptor_;
  metadata.reflection = CPerson_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Message

// @@protoc_insertion_point(global_scope)
